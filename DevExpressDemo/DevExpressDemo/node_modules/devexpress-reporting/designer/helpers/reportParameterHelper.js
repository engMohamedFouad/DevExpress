/**
* DevExpress HTML/JS Reporting (designer\helpers\reportParameterHelper.js)
* Version:  22.2.3
* Build date: Dec 6, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getUniqueNameForNamedObjectsArray } from '@devexpress/analytics-core/analytics-internal';
import { ParameterHelper } from '../../viewer/parameters/parameterHelper';
import { GroupLayoutItem, ParameterLayoutItem } from '../dataObjects/parameters/layoutItems';
export class ReportParameterHelper extends ParameterHelper {
    constructor(container) {
        super();
        this.container = container;
        this.allLayoutItems = [];
    }
    get parameters() {
        return this.container.parameters;
    }
    get parameterPanelLayoutItems() {
        return this.container.parameterPanelLayoutItems;
    }
    addParameterPanelLayoutItem(item) {
        this.allLayoutItems.push(item);
        if (item instanceof GroupLayoutItem && !item.title()) {
            var newName = getUniqueNameForNamedObjectsArray(this.allLayoutItems.filter(x => x instanceof GroupLayoutItem), 'Group');
            item.title(newName);
        }
    }
    removeParameterPanelLayoutItem(item) {
        this.allLayoutItems.splice(this.allLayoutItems.indexOf(item), 1);
    }
    startEditing() {
        this.parameters().forEach(parameter => {
            parameter._isEditing(true);
            parameter._showLayoutProperties(true);
        });
    }
    endEditing() {
        this.parameters().forEach(parameter => {
            parameter._isEditing(false);
            parameter._showLayoutProperties(false);
        });
    }
    updateParameterLayoutItems() {
        this.parameters().forEach(parameter => {
            var parameterLayoutItem = this.getParameterLayoutItem(parameter);
            if (!parameterLayoutItem) {
                var newItem = new ParameterLayoutItem({}, this.container, undefined, parameter);
                this.parameterPanelLayoutItems.push(newItem);
            }
        });
    }
    clearLayoutItems() {
        var toRemove = [];
        this.parameterPanelLayoutItems().forEach(item => {
            if (item instanceof ParameterLayoutItem) {
                var isModify = item.getInfo().some(x => !!x.editor && item.isPropertyModified(x.propertyName));
                if (!isModify) {
                    toRemove.push(item);
                }
            }
        });
        toRemove.forEach(x => this.parameterPanelLayoutItems.remove(x));
    }
    getParameterLayoutItem(parameter) {
        return this.allLayoutItems.filter(x => x['parameter'] && x['parameter']() === parameter)[0];
    }
    removeParameterModel(parameter) {
        for (var parameterLayoutItem of this.allLayoutItems) {
            if (parameterLayoutItem['parameter'] && parameterLayoutItem['parameter']() === parameter) {
                parameterLayoutItem.delete();
            }
        }
    }
}
