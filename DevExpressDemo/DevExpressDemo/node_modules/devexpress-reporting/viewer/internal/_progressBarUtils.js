/**
* DevExpress HTML/JS Reporting (viewer\internal\_progressBarUtils.js)
* Version:  22.2.3
* Build date: Dec 6, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { stringToPosition, getDockedElementCallback } from './_sizeUtils';
import * as ko from 'knockout';
import * as $ from 'jquery';
export function getUpdateProgressBarCallback(progressBarSettings, designerModel, reportPreview, rootElement, $window = $.fn.constructor(window)) {
    var keepProgressBarVisible = !progressBarSettings || progressBarSettings.keepOnVisibleArea !== false;
    var position = stringToPosition(progressBarSettings && progressBarSettings.position);
    reportPreview.progressBar.setPosition(position);
    if (!keepProgressBarVisible)
        return $.noop;
    var $root = $.fn.constructor(rootElement);
    var $progress = $root.find('.dxrd-preview-progress');
    var updateProgressBarPosition = getDockedElementCallback($progress, $root, $window, '.dxrd-preview-progress', position);
    designerModel._addDisposable(reportPreview.progressBar.visible.subscribe((isVisible) => {
        isVisible && updateProgressBarPosition(rootElement);
    }));
    var wrappedUpdateProgressPosition = () => {
        if (reportPreview.progressBar && ko.unwrap(reportPreview.progressBar.visible))
            updateProgressBarPosition(rootElement);
    };
    window.addEventListener('scroll', wrappedUpdateProgressPosition);
    designerModel._addDisposable({
        dispose: () => {
            window.removeEventListener('scroll', wrappedUpdateProgressPosition);
        }
    });
    return wrappedUpdateProgressPosition;
}
