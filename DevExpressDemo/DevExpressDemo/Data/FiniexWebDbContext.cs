// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DevExpressDemo.Models;

namespace DevExpressDemo.Data
{
    public partial class FiniexWebDbContext : DbContext
    {
        public FiniexWebDbContext()
        {
        }

        public FiniexWebDbContext(DbContextOptions<FiniexWebDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AbsenceOrder> AbsenceOrders { get; set; }
        public virtual DbSet<AccountBalance> AccountBalances { get; set; }
        public virtual DbSet<AccountBalanceDetail> AccountBalanceDetails { get; set; }
        public virtual DbSet<AdministrativeDecision> AdministrativeDecisions { get; set; }
        public virtual DbSet<AllInvoice> AllInvoices { get; set; }
        public virtual DbSet<AllInvoiceImage> AllInvoiceImages { get; set; }
        public virtual DbSet<AllInvoiceJion> AllInvoiceJions { get; set; }
        public virtual DbSet<AllInvoicesDetail> AllInvoicesDetails { get; set; }
        public virtual DbSet<AllInvoicesDetailsPayment> AllInvoicesDetailsPayments { get; set; }
        public virtual DbSet<AllInvoicesDetailsPaymentTemp> AllInvoicesDetailsPaymentTemps { get; set; }
        public virtual DbSet<AllInvoicesDetailsTemp> AllInvoicesDetailsTemps { get; set; }
        public virtual DbSet<AllInvoicesDetailsbak> AllInvoicesDetailsbaks { get; set; }
        public virtual DbSet<AllInvoicesTemp> AllInvoicesTemps { get; set; }
        public virtual DbSet<AllTransUser> AllTransUsers { get; set; }
        public virtual DbSet<AllVoucher> AllVouchers { get; set; }
        public virtual DbSet<AllVouchersDetail> AllVouchersDetails { get; set; }
        public virtual DbSet<All_Reports_detail> All_Reports_details { get; set; }
        public virtual DbSet<Analysis_report> Analysis_reports { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<AttendanceEmployessAutomated> AttendanceEmployessAutomateds { get; set; }
        public virtual DbSet<AttendanceEmployessPeriod> AttendanceEmployessPeriods { get; set; }
        public virtual DbSet<BankDatum> BankData { get; set; }
        public virtual DbSet<BaracnhAndWarehouseReleted> BaracnhAndWarehouseReleteds { get; set; }
        public virtual DbSet<BloodType> BloodTypes { get; set; }
        public virtual DbSet<BonusOrder> BonusOrders { get; set; }
        public virtual DbSet<BonusType> BonusTypes { get; set; }
        public virtual DbSet<BranchsAndWarehouse> BranchsAndWarehouses { get; set; }
        public virtual DbSet<CarsDatum> CarsData { get; set; }
        public virtual DbSet<ChecksInventory> ChecksInventories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ComissionBank> ComissionBanks { get; set; }
        public virtual DbSet<ComissionBankCard> ComissionBankCards { get; set; }
        public virtual DbSet<CompanyInformation> CompanyInformations { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractStatus> ContractStatuses { get; set; }
        public virtual DbSet<ContractType> ContractTypes { get; set; }
        public virtual DbSet<CostCenterBalance> CostCenterBalances { get; set; }
        public virtual DbSet<CostProduction> CostProductions { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CustomersBranch> CustomersBranches { get; set; }
        public virtual DbSet<CustomersPoint> CustomersPoints { get; set; }
        public virtual DbSet<Deduction> Deductions { get; set; }
        public virtual DbSet<DeductionDetail> DeductionDetails { get; set; }
        public virtual DbSet<DeductionOrder> DeductionOrders { get; set; }
        public virtual DbSet<DeductionType> DeductionTypes { get; set; }
        public virtual DbSet<DegreesDatum> DegreesData { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DistributionExpense> DistributionExpenses { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<EmailSetting> EmailSettings { get; set; }
        public virtual DbSet<EmpLang> EmpLangs { get; set; }
        public virtual DbSet<EmpStatus> EmpStatuses { get; set; }
        public virtual DbSet<EmployeeCategory> EmployeeCategories { get; set; }
        public virtual DbSet<EmployeeCosting> EmployeeCostings { get; set; }
        public virtual DbSet<EmployeesDetail> EmployeesDetails { get; set; }
        public virtual DbSet<EmployeesDetailsFamily> EmployeesDetailsFamilies { get; set; }
        public virtual DbSet<EmployessPeriod> EmployessPeriods { get; set; }
        public virtual DbSet<ErrorsLog> ErrorsLogs { get; set; }
        public virtual DbSet<Evaluation> Evaluations { get; set; }
        public virtual DbSet<EvaluationEmployee> EvaluationEmployees { get; set; }
        public virtual DbSet<ExpensesProduction> ExpensesProductions { get; set; }
        public virtual DbSet<ExpensesPurchase_Sale> ExpensesPurchase_Sales { get; set; }
        public virtual DbSet<Experience> Experiences { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<FormsName> FormsNames { get; set; }
        public virtual DbSet<FxiedAsset> FxiedAssets { get; set; }
        public virtual DbSet<FxiedAssetsAdded> FxiedAssetsAddeds { get; set; }
        public virtual DbSet<FxiedAssetsDetail> FxiedAssetsDetails { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GroupOrder> GroupOrders { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<IPAddressDevice> IPAddressDevices { get; set; }
        public virtual DbSet<IdentityUserPermission> IdentityUserPermissions { get; set; }
        public virtual DbSet<ImagesStatus> ImagesStatuses { get; set; }
        public virtual DbSet<InstallmentMonthly> InstallmentMonthlies { get; set; }
        public virtual DbSet<InventoryOfCash1> InventoryOfCash1s { get; set; }
        public virtual DbSet<InventoryOfChecks1> InventoryOfChecks1s { get; set; }
        public virtual DbSet<InvoicePurchaseDetail> InvoicePurchaseDetails { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemRelatedAcc> ItemRelatedAccs { get; set; }
        public virtual DbSet<ItemsAlternative> ItemsAlternatives { get; set; }
        public virtual DbSet<ItemsJoin> ItemsJoins { get; set; }
        public virtual DbSet<ItemsJoinPO> ItemsJoinPOs { get; set; }
        public virtual DbSet<ItemsPersonality> ItemsPersonalities { get; set; }
        public virtual DbSet<ItemsProduction> ItemsProductions { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LeaveDay> LeaveDays { get; set; }
        public virtual DbSet<LeaveOrder> LeaveOrders { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<LkpTable> LkpTables { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
        public virtual DbSet<LoansDetail> LoansDetails { get; set; }
        public virtual DbSet<LoansForm> LoansForms { get; set; }
        public virtual DbSet<LogoHR> LogoHRs { get; set; }
        public virtual DbSet<MainAccCompany> MainAccCompanies { get; set; }
        public virtual DbSet<MainAccCompanyHR> MainAccCompanyHRs { get; set; }
        public virtual DbSet<MainAccPurExp> MainAccPurExps { get; set; }
        public virtual DbSet<MainDataDefault> MainDataDefaults { get; set; }
        public virtual DbSet<MainDatum> MainData { get; set; }
        public virtual DbSet<MaritalStatus> MaritalStatuses { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<MoveGaid> MoveGaids { get; set; }
        public virtual DbSet<MoveGaidDetail> MoveGaidDetails { get; set; }
        public virtual DbSet<MovementCash> MovementCashes { get; set; }
        public virtual DbSet<OhdaOrder> OhdaOrders { get; set; }
        public virtual DbSet<OpenBalanceJournal> OpenBalanceJournals { get; set; }
        public virtual DbSet<OpenBalanceJournalDetail> OpenBalanceJournalDetails { get; set; }
        public virtual DbSet<OpenBalanceLeave> OpenBalanceLeaves { get; set; }
        public virtual DbSet<OthersForm> OthersForms { get; set; }
        public virtual DbSet<OverTimeOrder> OverTimeOrders { get; set; }
        public virtual DbSet<PagesNo> PagesNos { get; set; }
        public virtual DbSet<PassportDatum> PassportData { get; set; }
        public virtual DbSet<PassportType> PassportTypes { get; set; }
        public virtual DbSet<PayRoll> PayRolls { get; set; }
        public virtual DbSet<PeriodsAttan> PeriodsAttans { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PermissionExit> PermissionExits { get; set; }
        public virtual DbSet<PermissionsListHR> PermissionsListHRs { get; set; }
        public virtual DbSet<PrintContract> PrintContracts { get; set; }
        public virtual DbSet<Profession> Professions { get; set; }
        public virtual DbSet<PromotionJob> PromotionJobs { get; set; }
        public virtual DbSet<PromotionSalary> PromotionSalaries { get; set; }
        public virtual DbSet<ProviderCustomer> ProviderCustomers { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<Quantity> Quantities { get; set; }
        public virtual DbSet<QuantityBatch> QuantityBatches { get; set; }
        public virtual DbSet<QuantityStock> QuantityStocks { get; set; }
        public virtual DbSet<QuantityStocks1> QuantityStocks1s { get; set; }
        public virtual DbSet<Reconciliation> Reconciliations { get; set; }
        public virtual DbSet<ReconciliationsDetail> ReconciliationsDetails { get; set; }
        public virtual DbSet<RecordsCompany> RecordsCompanies { get; set; }
        public virtual DbSet<RelatedName> RelatedNames { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<ReturnSalesInvoice> ReturnSalesInvoices { get; set; }
        public virtual DbSet<RoleModulePermission> RoleModulePermissions { get; set; }
        public virtual DbSet<SMSSetting> SMSSettings { get; set; }
        public virtual DbSet<SalesManInfo> SalesManInfos { get; set; }
        public virtual DbSet<SalesmanQuantity> SalesmanQuantities { get; set; }
        public virtual DbSet<SettingBarcode> SettingBarcodes { get; set; }
        public virtual DbSet<SettingColor> SettingColors { get; set; }
        public virtual DbSet<SettingSystem> SettingSystems { get; set; }
        public virtual DbSet<SettingSystemHR> SettingSystemHRs { get; set; }
        public virtual DbSet<SettlementEmp> SettlementEmps { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SkillLevel> SkillLevels { get; set; }
        public virtual DbSet<SocialnsuranceAmount> SocialnsuranceAmounts { get; set; }
        public virtual DbSet<Sponsor> Sponsors { get; set; }
        public virtual DbSet<SubModule> SubModules { get; set; }
        public virtual DbSet<Synchronization> Synchronizations { get; set; }
        public virtual DbSet<SynchronizationConflict> SynchronizationConflicts { get; set; }
        public virtual DbSet<SynchronizationCount> SynchronizationCounts { get; set; }
        public virtual DbSet<SynchronizationUpdate> SynchronizationUpdates { get; set; }
        public virtual DbSet<TasksMessage> TasksMessages { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<TreeAccount> TreeAccounts { get; set; }
        public virtual DbSet<TreeAccountDefualt> TreeAccountDefualts { get; set; }
        public virtual DbSet<TrialBal> TrialBals { get; set; }
        public virtual DbSet<TypeOhdum> TypeOhda { get; set; }
        public virtual DbSet<UnitsBarcode> UnitsBarcodes { get; set; }
        public virtual DbSet<UnitsItem> UnitsItems { get; set; }
        public virtual DbSet<UserDataPermission> UserDataPermissions { get; set; }
        public virtual DbSet<UserDataPermissionHR> UserDataPermissionHRs { get; set; }
        public virtual DbSet<UserModulePermission> UserModulePermissions { get; set; }
        public virtual DbSet<UsersDatum> UsersData { get; set; }
        public virtual DbSet<UsersLogin> UsersLogins { get; set; }
        public virtual DbSet<ViewAbsence> ViewAbsences { get; set; }
        public virtual DbSet<ViewAdministDecision> ViewAdministDecisions { get; set; }
        public virtual DbSet<ViewAllInvoice> ViewAllInvoices { get; set; }
        public virtual DbSet<ViewAllInvoice_InvoiceDetail> ViewAllInvoice_InvoiceDetails { get; set; }
        public virtual DbSet<ViewAllInvoice_InvoiceDetailstemp> ViewAllInvoice_InvoiceDetailstemps { get; set; }
        public virtual DbSet<ViewAllMovement> ViewAllMovements { get; set; }
        public virtual DbSet<ViewAllTranUser> ViewAllTranUsers { get; set; }
        public virtual DbSet<ViewAllVoucher> ViewAllVouchers { get; set; }
        public virtual DbSet<ViewAllVouchers_VouchersDetail> ViewAllVouchers_VouchersDetails { get; set; }
        public virtual DbSet<ViewAutoAttendance> ViewAutoAttendances { get; set; }
        public virtual DbSet<ViewBalanceCostCenter> ViewBalanceCostCenters { get; set; }
        public virtual DbSet<ViewBoun> ViewBouns { get; set; }
        public virtual DbSet<ViewBranchsAndWarehouse> ViewBranchsAndWarehouses { get; set; }
        public virtual DbSet<ViewChartOfAccount> ViewChartOfAccounts { get; set; }
        public virtual DbSet<ViewChartOfAccountCustomer> ViewChartOfAccountCustomers { get; set; }
        public virtual DbSet<ViewChartOfAccountEmp> ViewChartOfAccountEmps { get; set; }
        public virtual DbSet<ViewChartOfCostCenter> ViewChartOfCostCenters { get; set; }
        public virtual DbSet<ViewChartOfCostCenterDetail> ViewChartOfCostCenterDetails { get; set; }
        public virtual DbSet<ViewChartOfCostCenterTotal> ViewChartOfCostCenterTotals { get; set; }
        public virtual DbSet<ViewCompanyDatum> ViewCompanyData { get; set; }
        public virtual DbSet<ViewContract> ViewContracts { get; set; }
        public virtual DbSet<ViewDebitOrCredit> ViewDebitOrCredits { get; set; }
        public virtual DbSet<ViewDedctionDetial> ViewDedctionDetials { get; set; }
        public virtual DbSet<ViewDeducation> ViewDeducations { get; set; }
        public virtual DbSet<ViewDueDate> ViewDueDates { get; set; }
        public virtual DbSet<ViewEmployee> ViewEmployees { get; set; }
        public virtual DbSet<ViewEmployessStatus> ViewEmployessStatuses { get; set; }
        public virtual DbSet<ViewExperience> ViewExperiences { get; set; }
        public virtual DbSet<ViewFamily> ViewFamilies { get; set; }
        public virtual DbSet<ViewGaidEntry> ViewGaidEntries { get; set; }
        public virtual DbSet<ViewGetAllBarcode> ViewGetAllBarcodes { get; set; }
        public virtual DbSet<ViewIndexOfItem> ViewIndexOfItems { get; set; }
        public virtual DbSet<ViewIndexOfItemsAndWithBatch> ViewIndexOfItemsAndWithBatches { get; set; }
        public virtual DbSet<ViewItem> ViewItems { get; set; }
        public virtual DbSet<ViewItemsPersonality> ViewItemsPersonalities { get; set; }
        public virtual DbSet<ViewItemsRequiredQuantity> ViewItemsRequiredQuantities { get; set; }
        public virtual DbSet<ViewLanguage> ViewLanguages { get; set; }
        public virtual DbSet<ViewLeave> ViewLeaves { get; set; }
        public virtual DbSet<ViewLoan> ViewLoans { get; set; }
        public virtual DbSet<ViewLoanDetial> ViewLoanDetials { get; set; }
        public virtual DbSet<ViewLoansInstallment> ViewLoansInstallments { get; set; }
        public virtual DbSet<ViewMainDatum> ViewMainData { get; set; }
        public virtual DbSet<ViewManagerDep> ViewManagerDeps { get; set; }
        public virtual DbSet<ViewMovementsEntry> ViewMovementsEntries { get; set; }
        public virtual DbSet<ViewMovementsItem> ViewMovementsItems { get; set; }
        public virtual DbSet<ViewNetSalesDueDate> ViewNetSalesDueDates { get; set; }
        public virtual DbSet<ViewOhdum> ViewOhda { get; set; }
        public virtual DbSet<ViewOpenBalanceJournal> ViewOpenBalanceJournals { get; set; }
        public virtual DbSet<ViewOpenBalanceLeave> ViewOpenBalanceLeaves { get; set; }
        public virtual DbSet<ViewOverTime> ViewOverTimes { get; set; }
        public virtual DbSet<ViewPaidInvoicesVoucher> ViewPaidInvoicesVouchers { get; set; }
        public virtual DbSet<ViewPassport> ViewPassports { get; set; }
        public virtual DbSet<ViewPayroll> ViewPayrolls { get; set; }
        public virtual DbSet<ViewPrintCustomerProvider> ViewPrintCustomerProviders { get; set; }
        public virtual DbSet<ViewPrintSalesman> ViewPrintSalesmen { get; set; }
        public virtual DbSet<ViewProfitItem> ViewProfitItems { get; set; }
        public virtual DbSet<ViewPromotion> ViewPromotions { get; set; }
        public virtual DbSet<ViewPromotionSalary> ViewPromotionSalaries { get; set; }
        public virtual DbSet<ViewQuantityJoin> ViewQuantityJoins { get; set; }
        public virtual DbSet<ViewReconAndRecondetail> ViewReconAndRecondetails { get; set; }
        public virtual DbSet<ViewReconciliation> ViewReconciliations { get; set; }
        public virtual DbSet<ViewReivewBalance> ViewReivewBalances { get; set; }
        public virtual DbSet<ViewReturnSalesBalanceNoPost> ViewReturnSalesBalanceNoPosts { get; set; }
        public virtual DbSet<ViewSalesBalanceDueDate> ViewSalesBalanceDueDates { get; set; }
        public virtual DbSet<ViewSalesBalanceNoPost> ViewSalesBalanceNoPosts { get; set; }
        public virtual DbSet<ViewSalesInvoice> ViewSalesInvoices { get; set; }
        public virtual DbSet<ViewSalesInvoiceDueDate> ViewSalesInvoiceDueDates { get; set; }
        public virtual DbSet<ViewSalesPriceItem> ViewSalesPriceItems { get; set; }
        public virtual DbSet<ViewSalesReturnDueDate> ViewSalesReturnDueDates { get; set; }
        public virtual DbSet<ViewSettlement> ViewSettlements { get; set; }
        public virtual DbSet<ViewSkill> ViewSkills { get; set; }
        public virtual DbSet<ViewSocialnsuranceAmount> ViewSocialnsuranceAmounts { get; set; }
        public virtual DbSet<ViewStatmentsBalance> ViewStatmentsBalances { get; set; }
        public virtual DbSet<ViewSumQuantityItem> ViewSumQuantityItems { get; set; }
        public virtual DbSet<ViewSumVochersReceipt> ViewSumVochersReceipts { get; set; }
        public virtual DbSet<ViewTicket> ViewTickets { get; set; }
        public virtual DbSet<ViewTradingAccount> ViewTradingAccounts { get; set; }
        public virtual DbSet<ViewTraninig> ViewTraninigs { get; set; }
        public virtual DbSet<ViewTransferQuotationSale> ViewTransferQuotationSales { get; set; }
        public virtual DbSet<ViewTrialBalance> ViewTrialBalances { get; set; }
        public virtual DbSet<ViewUnit> ViewUnits { get; set; }
        public virtual DbSet<ViewUnitItem> ViewUnitItems { get; set; }
        public virtual DbSet<ViewUsersBranch> ViewUsersBranches { get; set; }
        public virtual DbSet<ViewVAT> ViewVATs { get; set; }
        public virtual DbSet<ViewWarehouseItem> ViewWarehouseItems { get; set; }
        public virtual DbSet<ViewWarwHouseRelted> ViewWarwHouseRelteds { get; set; }
        public virtual DbSet<View_AttendanceAutomated> View_AttendanceAutomateds { get; set; }
        public virtual DbSet<View_CarsDatum> View_CarsData { get; set; }
        public virtual DbSet<View_Complex> View_Complexes { get; set; }
        public virtual DbSet<View_ContractPromotion> View_ContractPromotions { get; set; }
        public virtual DbSet<View_Contract_Passport> View_Contract_Passports { get; set; }
        public virtual DbSet<View_EvaluationPer> View_EvaluationPers { get; set; }
        public virtual DbSet<View_ExpenssInvoice> View_ExpenssInvoices { get; set; }
        public virtual DbSet<View_FexidAssetsDepration> View_FexidAssetsDeprations { get; set; }
        public virtual DbSet<View_FexidAsste> View_FexidAsstes { get; set; }
        public virtual DbSet<View_ItemsJoin> View_ItemsJoins { get; set; }
        public virtual DbSet<View_ItemsProductionUnit> View_ItemsProductionUnits { get; set; }
        public virtual DbSet<View_LoansForm> View_LoansForms { get; set; }
        public virtual DbSet<View_PermissionExit> View_PermissionExits { get; set; }
        public virtual DbSet<View_TransferProduction> View_TransferProductions { get; set; }

        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    if (!optionsBuilder.IsConfigured)
        //    {
        //        optionsBuilder.UseSqlServer("Data Source=38.242.128.14;Initial Catalog=FiniexWebDb;User ID=webprog;Password=123web@");
        //    }
        //}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Arabic_CI_AS");

            modelBuilder.Entity<AbsenceOrder>(entity =>
            {
                entity.HasKey(e => e.AbsenceID)
                    .HasName("PK_AbsenceOrder_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.TypeID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.AbsenceOrders)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_AbsenceOrder_EmployeesDetails");
            });

            modelBuilder.Entity<AccountBalance>(entity =>
            {
                entity.HasKey(e => new { e.AccID, e.FinancialID, e.BranchID })
                    .HasName("PK_CardAccountBalance");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.NoteAccStat).HasDefaultValueSql("('')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.AccountBalances)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_AccountBalance_TreeAccount");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.AccountBalances)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CardAccountBalance_BranchsWarehouse");

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.AccountBalances)
                    .HasForeignKey(d => d.FinancialID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CardAccountBalance_FinancialYear");
            });

            modelBuilder.Entity<AccountBalanceDetail>(entity =>
            {
                entity.HasKey(e => new { e.AccID, e.FinancialID, e.BranchID, e.PCId })
                    .HasName("PK_CardAccountBalanceDetails");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.NoteAccStat).HasDefaultValueSql("('')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.AccountBalanceDetails)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_AccountBalanceDetails_TreeAccount");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.AccountBalanceDetails)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CardAccountBalanceDetails_BranchsWarehouse");

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.AccountBalanceDetails)
                    .HasForeignKey(d => d.FinancialID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CardAccountBalanceDetails_FinancialYear");

                entity.HasOne(d => d.PC)
                    .WithMany(p => p.AccountBalanceDetails)
                    .HasForeignKey(d => d.PCId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountBalanceDetails_ProviderCustomers");
            });

            modelBuilder.Entity<AdministrativeDecision>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.AdministrativeDecisions)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_AdministrativeDecisions_EmployeesDetails");
            });

            modelBuilder.Entity<AllInvoice>(entity =>
            {
                entity.HasKey(e => e.InvoiceCode)
                    .HasName("PK_Invoices");

                entity.Property(e => e.InvoiceCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.InID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.AllInvoices)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_AllInvoices_TreeAccount");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.AllInvoices)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_AllInvoices_BranchsAndWarehouse");

                entity.HasOne(d => d.Cashier)
                    .WithMany(p => p.AllInvoices)
                    .HasForeignKey(d => d.CashierID)
                    .HasConstraintName("FK_AllInvoices_MainData");

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.AllInvoices)
                    .HasForeignKey(d => d.FinancialID)
                    .HasConstraintName("FK_AllInvoices_FinancialYear");

                entity.HasOne(d => d.SalesManCodeNavigation)
                    .WithMany(p => p.AllInvoices)
                    .HasForeignKey(d => d.SalesManCode)
                    .HasConstraintName("FK_Invoices_SalesManInfo");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AllInvoices)
                    .HasForeignKey(d => d.UserID)
                    .HasConstraintName("FK_Invoices_Users");
            });

            modelBuilder.Entity<AllInvoiceImage>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AllInvoiceJion>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AllInvoiceJions)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_AllInvoiceJions_Items");

                entity.HasOne(d => d.Note)
                    .WithMany(p => p.AllInvoiceJions)
                    .HasForeignKey(d => d.NoteID)
                    .HasConstraintName("FK_AllInvoiceJions_BasicData");
            });

            modelBuilder.Entity<AllInvoicesDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.InvoiceCodeNavigation)
                    .WithMany(p => p.AllInvoicesDetails)
                    .HasForeignKey(d => d.InvoiceCode)
                    .HasConstraintName("FK_InvoicesDetails_Invoices");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AllInvoicesDetails)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_InvoicesDetails_Items");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.AllInvoicesDetails)
                    .HasForeignKey(d => d.UnitID)
                    .HasConstraintName("FK_InvoicesDetails_BasicData");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.AllInvoicesDetails)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_AllInvoicesDetails_BranchsAndWarehouse");
            });

            modelBuilder.Entity<AllInvoicesDetailsPayment>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.AllInvoicesDetailsPayments)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_AllInvoicesDetailsPayment_AllInvoicesDetailsPayment");
            });

            modelBuilder.Entity<AllInvoicesDetailsPaymentTemp>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AllInvoicesDetailsTemp>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AllInvoicesDetailsbak>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AllInvoicesTemp>(entity =>
            {
                entity.HasKey(e => e.InvoiceCode)
                    .HasName("PK_Invoicestemp");

                entity.Property(e => e.InvoiceCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.InID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AllTransUser>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.NameButton).HasComment("0 \\ insert , 1 \\ Edit ,2 \\ Delete");
            });

            modelBuilder.Entity<AllVoucher>(entity =>
            {
                entity.HasKey(e => e.VoucherID)
                    .HasName("PK_Vouchers");

                entity.Property(e => e.VoucherID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.DateVoucher).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PrintCopyNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.VID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.AllVouchers)
                    .HasForeignKey(d => d.FinancialID)
                    .HasConstraintName("FK_Vouchers_FinancialYear");

                entity.HasOne(d => d.FromAcc)
                    .WithMany(p => p.AllVouchers)
                    .HasForeignKey(d => d.FromAccID)
                    .HasConstraintName("FK_Vouchers_CardAccount");

                entity.HasOne(d => d.SalesManCodeNavigation)
                    .WithMany(p => p.AllVouchers)
                    .HasForeignKey(d => d.SalesManCode)
                    .HasConstraintName("FK_Vouchers_Vouchers");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AllVouchers)
                    .HasForeignKey(d => d.UserID)
                    .HasConstraintName("FK_Vouchers_Users");
            });

            modelBuilder.Entity<AllVouchersDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.ToAcc)
                    .WithMany(p => p.AllVouchersDetails)
                    .HasForeignKey(d => d.ToAccID)
                    .HasConstraintName("FK_AllVouchersDetails_TreeAccount");
            });

            modelBuilder.Entity<All_Reports_detail>(entity =>
            {
                entity.HasKey(e => new { e.RepID, e.nSort })
                    .HasName("PK_All_Reports_details_1");
            });

            modelBuilder.Entity<Analysis_report>(entity =>
            {
                entity.HasKey(e => e.n_rep_no)
                    .HasName("PK_Analysis_reports_1");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.BranchID })
                    .HasName("PK_AspNetUserRoles_1");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetUserRoles_BranchsAndWarehouse");
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<AttendanceEmployessAutomated>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeCode, e.DateInsert, e.TimeInsert })
                    .HasName("PK_AttendanceEmployessAutomated_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AttendanceEmployessPeriod>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.AttendanceEmployessPeriods)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_AttendanceEmployessPeriod_EmployeesDetails");
            });

            modelBuilder.Entity<BankDatum>(entity =>
            {
                entity.Property(e => e.BankID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<BaracnhAndWarehouseReleted>(entity =>
            {
                entity.HasKey(e => new { e.BranchID, e.WarehouseID })
                    .HasName("PK_BaracnhAndWarehouseReleted_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<BloodType>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<BonusOrder>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.AccFund)
                    .WithMany(p => p.BonusOrders)
                    .HasForeignKey(d => d.AccFundID)
                    .HasConstraintName("FK_BonusOrder_TreeAccount");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.BonusOrders)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BonusOrder_EmployeesDetails");
            });

            modelBuilder.Entity<BonusType>(entity =>
            {
                entity.HasKey(e => e.BonusTypeID)
                    .HasName("PK_BonusTypes_1");

                entity.Property(e => e.BonusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<BranchsAndWarehouse>(entity =>
            {
                entity.HasKey(e => e.BWCode)
                    .HasName("PK_BranchsWarehouse");

                entity.Property(e => e.BWCode).ValueGeneratedNever();

                entity.Property(e => e.BWID).ValueGeneratedOnAdd();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.BWAcc)
                    .WithMany(p => p.BranchsAndWarehouses)
                    .HasForeignKey(d => d.BWAccID)
                    .HasConstraintName("FK_BranchsAndWarehouse_TreeAccount");
            });

            modelBuilder.Entity<CarsDatum>(entity =>
            {
                entity.Property(e => e.NoID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.CarsData)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_CarsData_EmployeesDetails");
            });

            modelBuilder.Entity<ChecksInventory>(entity =>
            {
                entity.Property(e => e.CashierID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.SalesManCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.HasKey(e => e.CityID)
                    .HasName("PK_Cites");

                entity.Property(e => e.CityID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Cities)
                    .HasForeignKey(d => d.CountryID)
                    .HasConstraintName("FK_Cities_Country");
            });

            modelBuilder.Entity<ComissionBank>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.ComissionBanks)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_ComissionBank_TreeAccount");
            });

            modelBuilder.Entity<ComissionBankCard>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<CompanyInformation>(entity =>
            {
                entity.HasKey(e => e.CompanyCode)
                    .HasName("PK_CompanyData");

                entity.Property(e => e.CompanyCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.CompanyInformations)
                    .HasForeignKey(d => d.CityID)
                    .HasConstraintName("FK_CompanyData_Cities");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.Property(e => e.ContractID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PayType).HasComment("1=Monthly, 2=quartyear, 3=Halfyear");

                entity.HasOne(d => d.ContractStatus)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.ContractStatusID)
                    .HasConstraintName("FK_Contracts_ContractStatus");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_Contracts_EmployeesDetails");
            });

            modelBuilder.Entity<ContractStatus>(entity =>
            {
                entity.HasKey(e => e.ContractStatusID)
                    .HasName("PK_ContractStatus_1");

                entity.Property(e => e.ContractStatusID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<ContractType>(entity =>
            {
                entity.HasKey(e => e.ContractTypeID)
                    .HasName("PK_ContractType_1");

                entity.Property(e => e.ContractTypeID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<CostCenterBalance>(entity =>
            {
                entity.HasKey(e => new { e.CostID, e.FinancialID, e.BranchID })
                    .HasName("PK_CardCostCenterBalance");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.NoteAccStat).HasDefaultValueSql("('')");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.CostCenterBalances)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CardCostCenterBalance_BranchsWarehouse");

                entity.HasOne(d => d.Cost)
                    .WithMany(p => p.CostCenterBalances)
                    .HasForeignKey(d => d.CostID)
                    .HasConstraintName("FK_CostCenterBalance_TreeCostCenter");

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.CostCenterBalances)
                    .HasForeignKey(d => d.FinancialID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CardCostCenterBalance_FinancialYear");
            });

            modelBuilder.Entity<CostProduction>(entity =>
            {
                entity.Property(e => e.CostNo).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.CostProductions)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_CostProduction_TreeAccount");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.CountryID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.Property(e => e.CurrencyID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<CustomersBranch>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.CustomersBranches)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_CustomersBranch_CustomersBranch");
            });

            modelBuilder.Entity<CustomersPoint>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.CurrentPoint).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PoCurrentBalance).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoMoveBalance).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoOpenBalance).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Deduction>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Deductions)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_Deduction_EmployeesDetails");
            });

            modelBuilder.Entity<DeductionDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.DeductionDetails)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_DeductionDetails_EmployeesDetails");
            });

            modelBuilder.Entity<DeductionOrder>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.DeductionOrders)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DeductionOrder_EmployeesDetails");
            });

            modelBuilder.Entity<DeductionType>(entity =>
            {
                entity.Property(e => e.DeductionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<DegreesDatum>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.DepartmentID)
                    .HasName("PK_Departments_1");

                entity.Property(e => e.DepartmentID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<DistributionExpense>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.DistributionExpenses)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_DistributionExpenses_TreeAccount");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.DistributionExpenses)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_DistributionExpenses_BranchsAndWarehouse");

                entity.HasOne(d => d.Cost)
                    .WithMany(p => p.DistributionExpenses)
                    .HasForeignKey(d => d.CostID)
                    .HasConstraintName("FK_DistributionExpenses_CostProduction");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Documents_EmployeesDetails");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.Property(e => e.DocTypeID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<EmailSetting>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<EmpLang>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.EmpLangs)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EmpLang_EmployeesDetails");
            });

            modelBuilder.Entity<EmpStatus>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<EmployeeCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryID)
                    .HasName("PK_LeaveCategory");

                entity.Property(e => e.CategoryID).HasDefaultValueSql("((1))");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Description).HasComment("0=Annually, 1=Monthly, 2=Daily");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<EmployeeCosting>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.EmployeeCostings)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeCosting_EmployeesDetails");
            });

            modelBuilder.Entity<EmployeesDetail>(entity =>
            {
                entity.Property(e => e.EmployeeCode).ValueGeneratedNever();

                entity.Property(e => e.BloodType).HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.DepartmentID).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmployeeID).ValueGeneratedOnAdd();

                entity.Property(e => e.GenderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Manager).HasDefaultValueSql("((0))");

                entity.Property(e => e.MaritalStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nationality).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProfessionsID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Qualification).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReligionID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AccIDDeNavigation)
                    .WithMany(p => p.EmployeesDetailAccIDDeNavigations)
                    .HasForeignKey(d => d.AccIDDe)
                    .HasConstraintName("FK_EmployeesDetails_TreeAccount");

                entity.HasOne(d => d.AccIDENavigation)
                    .WithMany(p => p.EmployeesDetailAccIDENavigations)
                    .HasForeignKey(d => d.AccIDE)
                    .HasConstraintName("FK_EmployeesDetails_TreeAccount2");

                entity.HasOne(d => d.AccIDLNavigation)
                    .WithMany(p => p.EmployeesDetailAccIDLNavigations)
                    .HasForeignKey(d => d.AccIDL)
                    .HasConstraintName("FK_EmployeesDetails_TreeAccount1");

                entity.HasOne(d => d.AccIDONavigation)
                    .WithMany(p => p.EmployeesDetailAccIDONavigations)
                    .HasForeignKey(d => d.AccIDO)
                    .HasConstraintName("FK_EmployeesDetails_TreeAccount3");
            });

            modelBuilder.Entity<EmployeesDetailsFamily>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.EmployeesDetailsFamilies)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeesDetailsFamily_EmployeesDetails");
            });

            modelBuilder.Entity<EmployessPeriod>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PeriodID).IsFixedLength();

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.EmployessPeriods)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_EmployessPeriod_EmployeesDetails");
            });

            modelBuilder.Entity<ErrorsLog>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Evaluation>(entity =>
            {
                entity.Property(e => e.EvaluationID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<EvaluationEmployee>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_EvaluationEmployees_EmployeesDetails");
            });

            modelBuilder.Entity<ExpensesProduction>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ExpensesProductions)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_ExpensesProduction_BranchsAndWarehouse");

                entity.HasOne(d => d.CostNoNavigation)
                    .WithMany(p => p.ExpensesProductions)
                    .HasForeignKey(d => d.CostNo)
                    .HasConstraintName("FK_ExpensesProduction_CostProduction");
            });

            modelBuilder.Entity<ExpensesPurchase_Sale>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.ExpensesPurchase_SaleAccs)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_ExpensesPurchase_Sales_TreeAccount");

                entity.HasOne(d => d.AccIDExpNavigation)
                    .WithMany(p => p.ExpensesPurchase_SaleAccIDExpNavigations)
                    .HasForeignKey(d => d.AccIDExp)
                    .HasConstraintName("FK_ExpensesPurchase_Sales_TreeAccount1");
            });

            modelBuilder.Entity<Experience>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Experiences)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_Experience_EmployeesDetails");
            });

            modelBuilder.Entity<FinancialYear>(entity =>
            {
                entity.Property(e => e.FinancialID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<FormsName>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<FxiedAsset>(entity =>
            {
                entity.Property(e => e.AssetID).ValueGeneratedNever();

                entity.Property(e => e.AmountRemove).HasDefaultValueSql("((0))");

                entity.Property(e => e.AssetStats).HasDefaultValueSql("((0))");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.DateRemove).HasDefaultValueSql("('')");

                entity.Property(e => e.DateRemoveHi).HasDefaultValueSql("('')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.NotesRemove).HasDefaultValueSql("('')");

                entity.HasOne(d => d.AccCash)
                    .WithMany(p => p.FxiedAssetAccCashes)
                    .HasForeignKey(d => d.AccCashID)
                    .HasConstraintName("FK_FxiedAssets_TreeAccount3");

                entity.HasOne(d => d.AccDe)
                    .WithMany(p => p.FxiedAssetAccDes)
                    .HasForeignKey(d => d.AccDeID)
                    .HasConstraintName("FK_FxiedAssets_TreeAccount2");

                entity.HasOne(d => d.AccEx)
                    .WithMany(p => p.FxiedAssetAccExes)
                    .HasForeignKey(d => d.AccExID)
                    .HasConstraintName("FK_FxiedAssets_TreeAccount1");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.FxiedAssetAccs)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_FxiedAssets_TreeAccount");

                entity.HasOne(d => d.AccProfit)
                    .WithMany(p => p.FxiedAssetAccProfits)
                    .HasForeignKey(d => d.AccProfitID)
                    .HasConstraintName("FK_FxiedAssets_TreeAccount4");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.FxiedAssets)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_FxiedAssets_BranchsAndWarehouse");

                entity.HasOne(d => d.GroupNoNavigation)
                    .WithMany(p => p.FxiedAssets)
                    .HasForeignKey(d => d.GroupNo)
                    .HasConstraintName("FK_FxiedAssets_MainData");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FxiedAssets)
                    .HasForeignKey(d => d.UserID)
                    .HasConstraintName("FK_FxiedAssets_UsersData");
            });

            modelBuilder.Entity<FxiedAssetsAdded>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.FxiedAssetsAddeds)
                    .HasForeignKey(d => d.AssetID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FxiedAssetsAdded_FxiedAssets");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.FxiedAssetsAddeds)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FxiedAssetsAdded_BranchsAndWarehouse");
            });

            modelBuilder.Entity<FxiedAssetsDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.SubAmountValue).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.FxiedAssetsDetails)
                    .HasForeignKey(d => d.AssetID)
                    .HasConstraintName("FK_FxiedAssetsDetails_FxiedAssets");
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.Property(e => e.GenderID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<GroupOrder>(entity =>
            {
                entity.HasKey(e => new { e.BranchID, e.MDCodeGroup });

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<IPAddressDevice>(entity =>
            {
                entity.Property(e => e.BranchID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<IdentityUserPermission>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.PermissionID });

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ImagesStatus>(entity =>
            {
                entity.Property(e => e.Namestatus).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<InstallmentMonthly>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.InstallmentMonthlies)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_InstallmentMonthly_EmployeesDetails");
            });

            modelBuilder.Entity<InventoryOfCash1>(entity =>
            {
                entity.ToView("InventoryOfCash1");
            });

            modelBuilder.Entity<InventoryOfChecks1>(entity =>
            {
                entity.ToView("InventoryOfChecks1");
            });

            modelBuilder.Entity<InvoicePurchaseDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.InvoicePurchaseDetails)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_InvoicePurchaseDetails_CardAccount");

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.InvoicePurchaseDetails)
                    .HasForeignKey(d => d.FinancialID)
                    .HasConstraintName("FK_InvoicePurchaseDetails_FinancialYear");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.HasKey(e => e.ItemID)
                    .HasName("PK_TabItems");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.StatsItems).HasDefaultValueSql("((0))");

                entity.Property(e => e.TypeItems).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BookingUnitNavigation)
                    .WithMany(p => p.ItemBookingUnitNavigations)
                    .HasForeignKey(d => d.BookingUnit)
                    .HasConstraintName("ItemBookingUnit_BasicData");

                entity.HasOne(d => d.ItemTypeNavigation)
                    .WithMany(p => p.ItemItemTypeNavigations)
                    .HasForeignKey(d => d.ItemType)
                    .HasConstraintName("ItemType_BasicData");

                entity.HasOne(d => d.MDCodeGroupNavigation)
                    .WithMany(p => p.ItemMDCodeGroupNavigations)
                    .HasForeignKey(d => d.MDCodeGroup)
                    .HasConstraintName("FK_Items_BasicData1");

                entity.HasOne(d => d.MDCodeSubGroupNavigation)
                    .WithMany(p => p.ItemMDCodeSubGroupNavigations)
                    .HasForeignKey(d => d.MDCodeSubGroup)
                    .HasConstraintName("ItemSubGroup_BasicData");

                entity.HasOne(d => d.MDCodeUnitNavigation)
                    .WithMany(p => p.ItemMDCodeUnitNavigations)
                    .HasForeignKey(d => d.MDCodeUnit)
                    .HasConstraintName("FK_Items_BasicData");

                entity.HasOne(d => d.MDPurUnitNavigation)
                    .WithMany(p => p.ItemMDPurUnitNavigations)
                    .HasForeignKey(d => d.MDPurUnit)
                    .HasConstraintName("ItemPurchaseUnit_BasicData");

                entity.HasOne(d => d.MDSalUnitNavigation)
                    .WithMany(p => p.ItemMDSalUnitNavigations)
                    .HasForeignKey(d => d.MDSalUnit)
                    .HasConstraintName("ItemSalesUnit_BasicData");

                entity.HasOne(d => d.OrderUnitNavigation)
                    .WithMany(p => p.ItemOrderUnitNavigations)
                    .HasForeignKey(d => d.OrderUnit)
                    .HasConstraintName("ItemOrderUnit_BasicData");

                entity.HasOne(d => d.QuatationUnitNavigation)
                    .WithMany(p => p.ItemQuatationUnitNavigations)
                    .HasForeignKey(d => d.QuatationUnit)
                    .HasConstraintName("ItemQuatationUnit_BasicData");
            });

            modelBuilder.Entity<ItemRelatedAcc>(entity =>
            {
                entity.HasKey(e => new { e.fkItemID, e.fkRelatedID, e.BranchID })
                    .HasName("PK_ItemRelatedAcc_1");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ItemRelatedAccs)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ItemsRelatedAcc_BranchsAndWarehouse");

                entity.HasOne(d => d.DiscountAcc)
                    .WithMany(p => p.ItemRelatedAccDiscountAccs)
                    .HasForeignKey(d => d.DiscountAccID)
                    .HasConstraintName("ItemsDiscountAcc_TreeAccount");

                entity.HasOne(d => d.ItemAcc)
                    .WithMany(p => p.ItemRelatedAccItemAccs)
                    .HasForeignKey(d => d.ItemAccID)
                    .HasConstraintName("ItemsAccId_TreeAccount");

                entity.HasOne(d => d.SalesCostAcc)
                    .WithMany(p => p.ItemRelatedAccSalesCostAccs)
                    .HasForeignKey(d => d.SalesCostAccID)
                    .HasConstraintName("ItemsSalesCostAcc_TreeAccount");

                entity.HasOne(d => d.StoreAcc)
                    .WithMany(p => p.ItemRelatedAccStoreAccs)
                    .HasForeignKey(d => d.StoreAccID)
                    .HasConstraintName("ItemsStoreAcc_TreeAccount");

                entity.HasOne(d => d.VatAcc)
                    .WithMany(p => p.ItemRelatedAccVatAccs)
                    .HasForeignKey(d => d.VatAccID)
                    .HasConstraintName("ItemsVatAcc_TreeAccount");

                entity.HasOne(d => d.fkItem)
                    .WithMany(p => p.ItemRelatedAccs)
                    .HasForeignKey(d => d.fkItemID)
                    .HasConstraintName("FK_ItemRelatedAcc_Items");
            });

            modelBuilder.Entity<ItemsAlternative>(entity =>
            {
                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ItemsAlternatives)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_ItemsAlternative_BranchsAndWarehouse");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ItemsAlternatives)
                    .HasForeignKey(d => d.GroupID)
                    .HasConstraintName("FK_ItemsAlternative_MainData");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemsAlternatives)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_ItemsAlternative_Items");
            });

            modelBuilder.Entity<ItemsJoin>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemsJoins)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_ItemsJoin_Items");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemsJoins)
                    .HasForeignKey(d => d.UnitID)
                    .HasConstraintName("FK_ItemsJoin_MainData");
            });

            modelBuilder.Entity<ItemsJoinPO>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemsJoinPOs)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_ItemsJoinPOS_Items");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemsJoinPOs)
                    .HasForeignKey(d => d.UnitID)
                    .HasConstraintName("FK_ItemsJoinPOS_MainData");
            });

            modelBuilder.Entity<ItemsPersonality>(entity =>
            {
                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ItemsPersonalities)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("ItemPersonality_BranchsAndWarehouse");
            });

            modelBuilder.Entity<ItemsProduction>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemsProductions)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_ItemsProduction_Items");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ItemsProductions)
                    .HasForeignKey(d => d.UnitID)
                    .HasConstraintName("FK_ItemsProduction_MainData");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasKey(e => e.JobID)
                    .HasName("PK_Job_2");

                entity.Property(e => e.JobID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<LeaveDay>(entity =>
            {
                entity.Property(e => e.DayID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<LeaveOrder>(entity =>
            {
                entity.Property(e => e.LeaveOrderNo).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.LeaveOrders)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LeaveOrder_EmployeesDetails");
            });

            modelBuilder.Entity<LeaveType>(entity =>
            {
                entity.Property(e => e.LeaveTypeID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<LkpTable>(entity =>
            {
                entity.HasKey(e => e.sTableNameAr)
                    .HasName("PK_LkpTables_1");

                entity.Property(e => e.serial).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Loan>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.AccFund)
                    .WithMany(p => p.Loans)
                    .HasForeignKey(d => d.AccFundID)
                    .HasConstraintName("FK_Loans_TreeAccount");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Loans)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Loans_EmployeesDetails");
            });

            modelBuilder.Entity<LoansDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.LoansDetails)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_LoansDetails_EmployeesDetails");

                entity.HasOne(d => d.IDLoanNavigation)
                    .WithMany(p => p.LoansDetails)
                    .HasForeignKey(d => d.IDLoan)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LoansDetails_Loans");
            });

            modelBuilder.Entity<LoansForm>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.LoansForms)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_LoansForms_EmployeesDetails");
            });

            modelBuilder.Entity<LogoHR>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<MainAccCompany>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.MainAccCompanies)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK_MainAccountCompany_CardAccount");
            });

            modelBuilder.Entity<MainAccCompanyHR>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.MainAccCompanyHRs)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK_MainAccountCompanyHR_CardAccount");
            });

            modelBuilder.Entity<MainAccPurExp>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<MainDataDefault>(entity =>
            {
                entity.Property(e => e.MDDCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.MDID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<MainDatum>(entity =>
            {
                entity.HasKey(e => e.MDCode)
                    .HasName("PK_BasicData");

                entity.Property(e => e.MDCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.MDID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.MAcc)
                    .WithMany(p => p.MainData)
                    .HasForeignKey(d => d.MAccID)
                    .HasConstraintName("FK_MainData_TreeAccount");
            });

            modelBuilder.Entity<MaritalStatus>(entity =>
            {
                entity.HasKey(e => e.MaritalStatusID)
                    .HasName("PK_MaritalStatus_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.HasKey(e => e.ModuleID)
                    .HasName("PK_PermissionsList");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<MoveGaid>(entity =>
            {
                entity.HasKey(e => e.MoveID)
                    .HasName("PK_Movements_1");

                entity.Property(e => e.MoveID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.MGID).ValueGeneratedOnAdd();

                entity.Property(e => e.PrintCopyNo).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MoveGaidDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.MoveGaidDetails)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_MoveGaidDetails_TreeAccount");

                entity.HasOne(d => d.Movement)
                    .WithMany(p => p.MoveGaidDetails)
                    .HasForeignKey(d => d.MovementID)
                    .HasConstraintName("FK_MoveGaidDetails_MoveGaid");
            });

            modelBuilder.Entity<MovementCash>(entity =>
            {
                entity.ToView("MovementCash");
            });

            modelBuilder.Entity<OhdaOrder>(entity =>
            {
                entity.Property(e => e.OhdaOrderNo).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.AccFund)
                    .WithMany(p => p.OhdaOrders)
                    .HasForeignKey(d => d.AccFundID)
                    .HasConstraintName("FK_OhdaOrder_TreeAccount");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.OhdaOrders)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_OhdaOrder_EmployeesDetails");
            });

            modelBuilder.Entity<OpenBalanceJournal>(entity =>
            {
                entity.Property(e => e.OpenBalID).ValueGeneratedNever();

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<OpenBalanceJournalDetail>(entity =>
            {
                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.OpenBalanceJournalDetails)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_OpenBalanceJournalDetails_TreeAccount");

                entity.HasOne(d => d.OpenBal)
                    .WithMany(p => p.OpenBalanceJournalDetails)
                    .HasForeignKey(d => d.OpenBalID)
                    .HasConstraintName("FK_OpenBalanceJournalDetails_OpenBalanceJournal");
            });

            modelBuilder.Entity<OpenBalanceLeave>(entity =>
            {
                entity.HasKey(e => e.EmployeeCode)
                    .HasName("PK_OpenBalanceLeave_1");

                entity.Property(e => e.EmployeeCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithOne(p => p.OpenBalanceLeave)
                    .HasForeignKey<OpenBalanceLeave>(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpenBalanceLeave_EmployeesDetails");
            });

            modelBuilder.Entity<OthersForm>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<OverTimeOrder>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.OverTimeID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.AccFund)
                    .WithMany(p => p.OverTimeOrders)
                    .HasForeignKey(d => d.AccFundID)
                    .HasConstraintName("FK_OverTimeOrder_TreeAccount");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.OverTimeOrders)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OverTimeOrder_EmployeesDetails");
            });

            modelBuilder.Entity<PagesNo>(entity =>
            {
                entity.Property(e => e.PageNoID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Financial)
                    .WithMany(p => p.PagesNos)
                    .HasForeignKey(d => d.FinancialID)
                    .HasConstraintName("FK_PagesNo_FinancialYear");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.PagesNos)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_PagesNo_Items");

                entity.HasOne(d => d.MDCodeNavigation)
                    .WithMany(p => p.PagesNos)
                    .HasForeignKey(d => d.MDCode)
                    .HasConstraintName("FK_PagesNo_BasicData");
            });

            modelBuilder.Entity<PassportDatum>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.PassportData)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_PassportData_EmployeesDetails");
            });

            modelBuilder.Entity<PassportType>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<PayRoll>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PaySales).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.PayRolls)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_PayRoll_EmployeesDetails");
            });

            modelBuilder.Entity<PeriodsAttan>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.HasKey(e => e.PermissionID)
                    .HasName("PK_Permission_1");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PermissionExit>(entity =>
            {
                entity.HasKey(e => e.PermissionOrderNo)
                    .HasName("PK_Permission");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PermissionID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.PermissionExits)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Permission_EmployeesDetails");
            });

            modelBuilder.Entity<PermissionsListHR>(entity =>
            {
                entity.Property(e => e.PermissionsCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PermissionsID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PrintContract>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Profession>(entity =>
            {
                entity.Property(e => e.IDProfessions).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<PromotionJob>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.PromotionJobs)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_PromotionJob_EmployeesDetails");
            });

            modelBuilder.Entity<PromotionSalary>(entity =>
            {
                entity.HasKey(e => e.OrderNo)
                    .HasName("PK_PromotionSalary_1");

                entity.Property(e => e.OrderNo).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PayType).HasComment("1=Monthly, 2=quartyear, 3=Halfyear");

                entity.Property(e => e.SocialnsuranceAmount).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.PromotionSalaries)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromotionSalary_EmployeesDetails");
            });

            modelBuilder.Entity<ProviderCustomer>(entity =>
            {
                entity.Property(e => e.ProviderCustomerID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PCID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.ProviderCustomers)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_ProviderCustomers_TreeAccount");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ProviderCustomers)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProviderCustomers_BranchsAndWarehouse");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ProviderCustomers)
                    .HasForeignKey(d => d.CityID)
                    .HasConstraintName("FK_ProviderCustomers_Cities");

                entity.HasOne(d => d.GroupNoNavigation)
                    .WithMany(p => p.ProviderCustomers)
                    .HasForeignKey(d => d.GroupNo)
                    .HasConstraintName("FK_ProviderCustomers_MainData");

                entity.HasOne(d => d.Saleman)
                    .WithMany(p => p.ProviderCustomers)
                    .HasForeignKey(d => d.SalemanID)
                    .HasConstraintName("FK_ProviderCustomers_SalesManInfo");
            });

            modelBuilder.Entity<Qualification>(entity =>
            {
                entity.HasKey(e => e.QualificationID)
                    .HasName("PK_Qualifications_1");

                entity.Property(e => e.QualificationID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Quantity>(entity =>
            {
                entity.HasKey(e => new { e.WareHouseID, e.ItemID, e.BranchID })
                    .HasName("PK_Quantity_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.QuantityCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.QuantityBranches)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Quantity_BranchsWarehouse");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Quantities)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_Quantity_Items");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.QuantityWareHouses)
                    .HasForeignKey(d => d.WareHouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Quantity_BranchsWarehouse1");
            });

            modelBuilder.Entity<QuantityBatch>(entity =>
            {
                entity.HasKey(e => new { e.WareHouseID, e.ItemID, e.BranchID, e.Batch, e.Personality })
                    .HasName("PK_QuantityBatch_1");

                entity.Property(e => e.QuantityCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.QuantityBatchBranches)
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuantityBatch_BranchsWarehouse");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuantityBatches)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_QuantityBatch_Items");

                entity.HasOne(d => d.WareHouse)
                    .WithMany(p => p.QuantityBatchWareHouses)
                    .HasForeignKey(d => d.WareHouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuantityBatch_BranchsWarehouse1");
            });

            modelBuilder.Entity<QuantityStock>(entity =>
            {
                entity.ToView("QuantityStocks");
            });

            modelBuilder.Entity<QuantityStocks1>(entity =>
            {
                entity.ToView("QuantityStocks1");
            });

            modelBuilder.Entity<Reconciliation>(entity =>
            {
                entity.Property(e => e.RecCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.RecID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.Reconciliations)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_Reconciliations_TreeAccount");
            });

            modelBuilder.Entity<ReconciliationsDetail>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Rec)
                    .WithMany()
                    .HasForeignKey(d => d.RecID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ReconciliationsDetails_Reconciliations");
            });

            modelBuilder.Entity<RecordsCompany>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<RelatedName>(entity =>
            {
                entity.Property(e => e.RelatedID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Religion>(entity =>
            {
                entity.HasKey(e => e.ReligionID)
                    .HasName("PK_Religion_1");

                entity.Property(e => e.ReligionID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<ReturnSalesInvoice>(entity =>
            {
                entity.ToView("ReturnSalesInvoice");
            });

            modelBuilder.Entity<RoleModulePermission>(entity =>
            {
                entity.HasKey(e => new { e.PermissionID, e.SubModuleID, e.RoleID });

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.RoleModulePermissions)
                    .HasForeignKey(d => d.PermissionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoleModulePermissions_Permission");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleModulePermissions)
                    .HasForeignKey(d => d.RoleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoleModulePermissions_AspNetRoles");

                entity.HasOne(d => d.SubModule)
                    .WithMany(p => p.RoleModulePermissions)
                    .HasForeignKey(d => d.SubModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoleModulePermissions_SubModule");
            });

            modelBuilder.Entity<SMSSetting>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SalesManInfo>(entity =>
            {
                entity.Property(e => e.SalesManCode).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.SalesManID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.SalesManInfos)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_SalesManInfo_CardAccount");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.SalesManInfos)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_SalesManInfo_BranchsWarehouse");
            });

            modelBuilder.Entity<SalesmanQuantity>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.SalesmanQuantities)
                    .HasForeignKey(d => d.BranchID)
                    .HasConstraintName("FK_SalesmanQuantity_BranchsAndWarehouse");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SalesmanQuantities)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SalesmanQuantity_Items");

                entity.HasOne(d => d.Salesman)
                    .WithMany(p => p.SalesmanQuantities)
                    .HasForeignKey(d => d.SalesmanID)
                    .HasConstraintName("FK_SalesmanQuantity_SalesManInfo");
            });

            modelBuilder.Entity<SettingBarcode>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SettingColor>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SettingSystem>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ShowSetup).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SettingSystemHR>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ShowSetup).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SettlementEmp>(entity =>
            {
                entity.HasKey(e => e.SettNo)
                    .HasName("PK_SettlementEmp_1");

                entity.Property(e => e.SettNo).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Done).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.SettID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.SettlementEmps)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_SettlementEmp_EmployeesDetails");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Skills_EmployeesDetails");
            });

            modelBuilder.Entity<SkillLevel>(entity =>
            {
                entity.Property(e => e.SkillLevelID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SocialnsuranceAmount>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.PayType).HasComment("1=Monthly, 2=quartyear, 3=Halfyear");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.SocialnsuranceAmounts)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialnsuranceAmount_EmployeesDetails");
            });

            modelBuilder.Entity<Sponsor>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.SID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SubModule>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.SubModules)
                    .HasForeignKey(d => d.ModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubModule_Modules");
            });

            modelBuilder.Entity<Synchronization>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SynchronizationConflict>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SynchronizationCount>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<SynchronizationUpdate>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.DateTimeSyn).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<TasksMessage>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<Ticket>(entity =>
            {
                entity.Property(e => e.TicOrderNo).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.EmployeeCode)
                    .HasConstraintName("FK_Tickets_EmployeesDetails");
            });

            modelBuilder.Entity<Training>(entity =>
            {
                entity.HasKey(e => e.TrainID)
                    .HasName("PK_Training_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.EmployeeCodeNavigation)
                    .WithMany(p => p.Training)
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Training_EmployeesDetails");
            });

            modelBuilder.Entity<TreeAccount>(entity =>
            {
                entity.HasKey(e => e.AccID)
                    .HasName("PK_CardAccount");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<TreeAccountDefualt>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<TrialBal>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Acc)
                    .WithMany(p => p.TrialBals)
                    .HasForeignKey(d => d.AccID)
                    .HasConstraintName("FK_TrialBal_TreeAccount");
            });

            modelBuilder.Entity<TypeOhdum>(entity =>
            {
                entity.Property(e => e.OhdaTypeID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<UnitsBarcode>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.UnitID, e.BranchID, e.UnitBarcode });

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<UnitsItem>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.UnitID, e.BranchID })
                    .HasName("PK_UnitsItems_1");

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.UnitsItems)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_UnitsItems_Items");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.UnitsItems)
                    .HasForeignKey(d => d.UnitID)
                    .HasConstraintName("FK_UnitsItems_MainData");
            });

            modelBuilder.Entity<UserDataPermission>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.BranchID });

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserDataPermissions)
                    .HasForeignKey(d => d.UserID)
                    .HasConstraintName("FK_UserDataPermission_UsersData");
            });

            modelBuilder.Entity<UserDataPermissionHR>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");

                entity.HasOne(d => d.Branch)
                    .WithMany()
                    .HasForeignKey(d => d.BranchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDataPermissionHR_BranchsAndWarehouse");

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserID)
                    .HasConstraintName("FK_UserDataPermissionHR_UsersData");
            });

            modelBuilder.Entity<UserModulePermission>(entity =>
            {
                entity.HasKey(e => new { e.PermissionID, e.SubModuleID, e.RoleID });

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserModulePermissions)
                    .HasForeignKey(d => d.RoleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserModulePermissions_AspNetRoles");
            });

            modelBuilder.Entity<UsersDatum>(entity =>
            {
                entity.HasKey(e => e.UserID)
                    .HasName("PK_Users");

                entity.Property(e => e.UserID).ValueGeneratedNever();

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<UsersLogin>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastModified).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<ViewAbsence>(entity =>
            {
                entity.ToView("ViewAbsence");
            });

            modelBuilder.Entity<ViewAdministDecision>(entity =>
            {
                entity.ToView("ViewAdministDecisions");
            });

            modelBuilder.Entity<ViewAllInvoice>(entity =>
            {
                entity.ToView("ViewAllInvoice");
            });

            modelBuilder.Entity<ViewAllInvoice_InvoiceDetail>(entity =>
            {
                entity.ToView("ViewAllInvoice_InvoiceDetails");
            });

            modelBuilder.Entity<ViewAllInvoice_InvoiceDetailstemp>(entity =>
            {
                entity.ToView("ViewAllInvoice_InvoiceDetailstemp");
            });

            modelBuilder.Entity<ViewAllMovement>(entity =>
            {
                entity.ToView("ViewAllMovement");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewAllTranUser>(entity =>
            {
                entity.ToView("ViewAllTranUser");
            });

            modelBuilder.Entity<ViewAllVoucher>(entity =>
            {
                entity.ToView("ViewAllVouchers");
            });

            modelBuilder.Entity<ViewAllVouchers_VouchersDetail>(entity =>
            {
                entity.ToView("ViewAllVouchers_VouchersDetails");
            });

            modelBuilder.Entity<ViewAutoAttendance>(entity =>
            {
                entity.ToView("ViewAutoAttendance");
            });

            modelBuilder.Entity<ViewBalanceCostCenter>(entity =>
            {
                entity.ToView("ViewBalanceCostCenter");
            });

            modelBuilder.Entity<ViewBoun>(entity =>
            {
                entity.ToView("ViewBouns");
            });

            modelBuilder.Entity<ViewBranchsAndWarehouse>(entity =>
            {
                entity.ToView("ViewBranchsAndWarehouse");
            });

            modelBuilder.Entity<ViewChartOfAccount>(entity =>
            {
                entity.ToView("ViewChartOfAccount");
            });

            modelBuilder.Entity<ViewChartOfAccountCustomer>(entity =>
            {
                entity.ToView("ViewChartOfAccountCustomer");
            });

            modelBuilder.Entity<ViewChartOfAccountEmp>(entity =>
            {
                entity.ToView("ViewChartOfAccountEmp");
            });

            modelBuilder.Entity<ViewChartOfCostCenter>(entity =>
            {
                entity.ToView("ViewChartOfCostCenter");
            });

            modelBuilder.Entity<ViewChartOfCostCenterDetail>(entity =>
            {
                entity.ToView("ViewChartOfCostCenterDetails");
            });

            modelBuilder.Entity<ViewChartOfCostCenterTotal>(entity =>
            {
                entity.ToView("ViewChartOfCostCenterTotal");
            });

            modelBuilder.Entity<ViewCompanyDatum>(entity =>
            {
                entity.ToView("ViewCompanyData");
            });

            modelBuilder.Entity<ViewContract>(entity =>
            {
                entity.ToView("ViewContract");
            });

            modelBuilder.Entity<ViewDebitOrCredit>(entity =>
            {
                entity.ToView("ViewDebitOrCredit");
            });

            modelBuilder.Entity<ViewDedctionDetial>(entity =>
            {
                entity.ToView("ViewDedctionDetials");
            });

            modelBuilder.Entity<ViewDeducation>(entity =>
            {
                entity.ToView("ViewDeducation");
            });

            modelBuilder.Entity<ViewDueDate>(entity =>
            {
                entity.ToView("ViewDueDate");
            });

            modelBuilder.Entity<ViewEmployee>(entity =>
            {
                entity.ToView("ViewEmployees");
            });

            modelBuilder.Entity<ViewEmployessStatus>(entity =>
            {
                entity.ToView("ViewEmployessStatus");
            });

            modelBuilder.Entity<ViewExperience>(entity =>
            {
                entity.ToView("ViewExperience");
            });

            modelBuilder.Entity<ViewFamily>(entity =>
            {
                entity.ToView("ViewFamily");
            });

            modelBuilder.Entity<ViewGaidEntry>(entity =>
            {
                entity.ToView("ViewGaidEntry");
            });

            modelBuilder.Entity<ViewGetAllBarcode>(entity =>
            {
                entity.ToView("ViewGetAllBarcodes");
            });

            modelBuilder.Entity<ViewIndexOfItem>(entity =>
            {
                entity.ToView("ViewIndexOfItems");
            });

            modelBuilder.Entity<ViewIndexOfItemsAndWithBatch>(entity =>
            {
                entity.ToView("ViewIndexOfItemsAndWithBatch");
            });

            modelBuilder.Entity<ViewItem>(entity =>
            {
                entity.ToView("ViewItems");
            });

            modelBuilder.Entity<ViewItemsPersonality>(entity =>
            {
                entity.ToView("ViewItemsPersonality");
            });

            modelBuilder.Entity<ViewItemsRequiredQuantity>(entity =>
            {
                entity.ToView("ViewItemsRequiredQuantity");
            });

            modelBuilder.Entity<ViewLanguage>(entity =>
            {
                entity.ToView("ViewLanguages");
            });

            modelBuilder.Entity<ViewLeave>(entity =>
            {
                entity.ToView("ViewLeave");
            });

            modelBuilder.Entity<ViewLoan>(entity =>
            {
                entity.ToView("ViewLoans");
            });

            modelBuilder.Entity<ViewLoanDetial>(entity =>
            {
                entity.ToView("ViewLoanDetials");
            });

            modelBuilder.Entity<ViewLoansInstallment>(entity =>
            {
                entity.ToView("ViewLoansInstallment");
            });

            modelBuilder.Entity<ViewMainDatum>(entity =>
            {
                entity.ToView("ViewMainData");
            });

            modelBuilder.Entity<ViewManagerDep>(entity =>
            {
                entity.ToView("ViewManagerDep");
            });

            modelBuilder.Entity<ViewMovementsEntry>(entity =>
            {
                entity.ToView("ViewMovementsEntry");
            });

            modelBuilder.Entity<ViewMovementsItem>(entity =>
            {
                entity.ToView("ViewMovementsItems");
            });

            modelBuilder.Entity<ViewNetSalesDueDate>(entity =>
            {
                entity.ToView("ViewNetSalesDueDate");
            });

            modelBuilder.Entity<ViewOhdum>(entity =>
            {
                entity.ToView("ViewOhda");
            });

            modelBuilder.Entity<ViewOpenBalanceJournal>(entity =>
            {
                entity.ToView("ViewOpenBalanceJournal");
            });

            modelBuilder.Entity<ViewOpenBalanceLeave>(entity =>
            {
                entity.ToView("ViewOpenBalanceLeave");
            });

            modelBuilder.Entity<ViewOverTime>(entity =>
            {
                entity.ToView("ViewOverTime");
            });

            modelBuilder.Entity<ViewPaidInvoicesVoucher>(entity =>
            {
                entity.ToView("ViewPaidInvoicesVouchers");
            });

            modelBuilder.Entity<ViewPassport>(entity =>
            {
                entity.ToView("ViewPassport");
            });

            modelBuilder.Entity<ViewPayroll>(entity =>
            {
                entity.ToView("ViewPayroll");
            });

            modelBuilder.Entity<ViewPrintCustomerProvider>(entity =>
            {
                entity.ToView("ViewPrintCustomerProvider");
            });

            modelBuilder.Entity<ViewPrintSalesman>(entity =>
            {
                entity.ToView("ViewPrintSalesmen");
            });

            modelBuilder.Entity<ViewProfitItem>(entity =>
            {
                entity.ToView("ViewProfitItems");
            });

            modelBuilder.Entity<ViewPromotion>(entity =>
            {
                entity.ToView("ViewPromotion");
            });

            modelBuilder.Entity<ViewPromotionSalary>(entity =>
            {
                entity.ToView("ViewPromotionSalary");
            });

            modelBuilder.Entity<ViewQuantityJoin>(entity =>
            {
                entity.ToView("ViewQuantityJoin");
            });

            modelBuilder.Entity<ViewReconAndRecondetail>(entity =>
            {
                entity.ToView("ViewReconAndRecondetails");
            });

            modelBuilder.Entity<ViewReconciliation>(entity =>
            {
                entity.ToView("ViewReconciliations");
            });

            modelBuilder.Entity<ViewReivewBalance>(entity =>
            {
                entity.ToView("ViewReivewBalance");
            });

            modelBuilder.Entity<ViewReturnSalesBalanceNoPost>(entity =>
            {
                entity.ToView("ViewReturnSalesBalanceNoPost");
            });

            modelBuilder.Entity<ViewSalesBalanceDueDate>(entity =>
            {
                entity.ToView("ViewSalesBalanceDueDate");
            });

            modelBuilder.Entity<ViewSalesBalanceNoPost>(entity =>
            {
                entity.ToView("ViewSalesBalanceNoPost");
            });

            modelBuilder.Entity<ViewSalesInvoice>(entity =>
            {
                entity.ToView("ViewSalesInvoice");
            });

            modelBuilder.Entity<ViewSalesInvoiceDueDate>(entity =>
            {
                entity.ToView("ViewSalesInvoiceDueDate");
            });

            modelBuilder.Entity<ViewSalesPriceItem>(entity =>
            {
                entity.ToView("ViewSalesPriceItems");
            });

            modelBuilder.Entity<ViewSalesReturnDueDate>(entity =>
            {
                entity.ToView("ViewSalesReturnDueDate");
            });

            modelBuilder.Entity<ViewSettlement>(entity =>
            {
                entity.ToView("ViewSettlement");
            });

            modelBuilder.Entity<ViewSkill>(entity =>
            {
                entity.ToView("ViewSkills");
            });

            modelBuilder.Entity<ViewSocialnsuranceAmount>(entity =>
            {
                entity.ToView("ViewSocialnsuranceAmount");
            });

            modelBuilder.Entity<ViewStatmentsBalance>(entity =>
            {
                entity.ToView("ViewStatmentsBalance");
            });

            modelBuilder.Entity<ViewSumQuantityItem>(entity =>
            {
                entity.ToView("ViewSumQuantityItems");
            });

            modelBuilder.Entity<ViewSumVochersReceipt>(entity =>
            {
                entity.ToView("ViewSumVochersReceipt");
            });

            modelBuilder.Entity<ViewTicket>(entity =>
            {
                entity.ToView("ViewTickets");
            });

            modelBuilder.Entity<ViewTradingAccount>(entity =>
            {
                entity.ToView("ViewTradingAccount");
            });

            modelBuilder.Entity<ViewTraninig>(entity =>
            {
                entity.ToView("ViewTraninig");
            });

            modelBuilder.Entity<ViewTransferQuotationSale>(entity =>
            {
                entity.ToView("ViewTransferQuotationSales");
            });

            modelBuilder.Entity<ViewTrialBalance>(entity =>
            {
                entity.ToView("ViewTrialBalance");
            });

            modelBuilder.Entity<ViewUnit>(entity =>
            {
                entity.ToView("ViewUnits");
            });

            modelBuilder.Entity<ViewUnitItem>(entity =>
            {
                entity.ToView("ViewUnitItems");
            });

            modelBuilder.Entity<ViewUsersBranch>(entity =>
            {
                entity.ToView("ViewUsersBranch");
            });

            modelBuilder.Entity<ViewVAT>(entity =>
            {
                entity.ToView("ViewVAT");
            });

            modelBuilder.Entity<ViewWarehouseItem>(entity =>
            {
                entity.ToView("ViewWarehouseItems");
            });

            modelBuilder.Entity<ViewWarwHouseRelted>(entity =>
            {
                entity.ToView("ViewWarwHouseRelted");
            });

            modelBuilder.Entity<View_AttendanceAutomated>(entity =>
            {
                entity.ToView("View_AttendanceAutomated");
            });

            modelBuilder.Entity<View_CarsDatum>(entity =>
            {
                entity.ToView("View_CarsData");
            });

            modelBuilder.Entity<View_Complex>(entity =>
            {
                entity.ToView("View_Complex");
            });

            modelBuilder.Entity<View_ContractPromotion>(entity =>
            {
                entity.ToView("View_ContractPromotion");
            });

            modelBuilder.Entity<View_Contract_Passport>(entity =>
            {
                entity.ToView("View_Contract_Passport");
            });

            modelBuilder.Entity<View_EvaluationPer>(entity =>
            {
                entity.ToView("View_EvaluationPer");
            });

            modelBuilder.Entity<View_ExpenssInvoice>(entity =>
            {
                entity.ToView("View_ExpenssInvoice");
            });

            modelBuilder.Entity<View_FexidAssetsDepration>(entity =>
            {
                entity.ToView("View_FexidAssetsDepration");
            });

            modelBuilder.Entity<View_FexidAsste>(entity =>
            {
                entity.ToView("View_FexidAsstes");
            });

            modelBuilder.Entity<View_ItemsJoin>(entity =>
            {
                entity.ToView("View_ItemsJoin");
            });

            modelBuilder.Entity<View_ItemsProductionUnit>(entity =>
            {
                entity.ToView("View_ItemsProductionUnit");
            });

            modelBuilder.Entity<View_LoansForm>(entity =>
            {
                entity.ToView("View_LoansForm");
            });

            modelBuilder.Entity<View_PermissionExit>(entity =>
            {
                entity.ToView("View_PermissionExit");
            });

            modelBuilder.Entity<View_TransferProduction>(entity =>
            {
                entity.ToView("View_TransferProduction");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}